# -*- mode: ruby -*-
# vim: set ft=ruby :

home = ENV['HOME']

MACHINES = {
  :"asdatarius-raid" => {
    :box_name => "asdatarius/centos-7-5",
    # VM CPU count
    :cpus => 4,
    # VM RAM size (Mb)
    :memory => 2048,
    # networks
    :net => [
      ip: '192.168.11.101'
    ],
    # forwarded ports
    :forwarded_port => [],
    # disks
    :disks => {
      :sata1 => {
        :dfile => home + '/vm/disks/otus-linux-raid/sata1.vdi',
        :size => 250, # MB
        :port => 1
      },
      :sata2 => {
        :dfile => home + '/vm/disks/otus-linux-raid/sata2.vdi',
        :size => 250, # MB
        :port => 2
      },
      :sata3 => {
        :dfile => home + '/vm/disks/otus-linux-raid/sata3.vdi',
        :size => 250, # MB
        :port => 3
      },
      :sata4 => {
        :dfile => home + '/vm/disks/otus-linux-raid/sata4.vdi',
        :size => 250, # MB
        :port => 4
      }
    }
  }
}

Vagrant.configure("2") do |config|
  MACHINES.each do |boxname, boxconfig|
    config.vm.synced_folder ".", "/vagrant"
    # Apply VM config
    config.vm.define boxname do |box|
      # Set VM base box and hostname
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxname.to_s
      # Additional network config if present
      if boxconfig.key?(:net)
        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
      end
      # Port-forward config if present
      if boxconfig.key?(:forwarded_port)
        boxconfig[:forwarded_port].each do |port|
          box.vm.network "forwarded_port", port
        end
      end
      # VM resources config
      box.vm.provider "virtualbox" do |v|
        # Set VM RAM size and CPU count
        v.memory = boxconfig[:memory]
        v.cpus = boxconfig[:cpus]
        # Attach disks if needed
        if boxconfig.key?(:disks)
          needsController = false
          boxconfig[:disks].each do |dname, dconf|
          	# Create disks
            unless File.exist?(dconf[:dfile])
              v.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
              needsController =  true
            end
          end

          if needsController == true
            v.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
            # Attach disks
            boxconfig[:disks].each do |dname, dconf|
              v.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
            end
          end
        end
      end
      # Provision
      box.vm.provision "shell", inline: <<-SHELL
        yum install mdadm smartmontools hdparm gdisk -y
        mdadm --zero-superblock --force /dev/sd{b,c,d,e}
        mdadm --create /dev/md0 -l 10 -n 4 /dev/sd{b,c,d,e}
        mkdir -p /etc/mdadm/
        echo "DEVICE partitions" > /etc/mdadm/mdadm.conf
        mdadm --detail --scan --verbose | awk '/ARRAY/ {print}' >> /etc/mdadm/mdadm.conf

        parted -s /dev/md0 mklabel gpt
        parted /dev/md0 mkpart primary xfs 0% 25%
        parted /dev/md0 mkpart primary xfs 25% 50%
        parted /dev/md0 mkpart primary xfs 50% 75%
        parted /dev/md0 mkpart primary xfs 75% 100%
        for i in $(seq 1 4); do sudo mkfs.xfs /dev/md0p$i; done
        mkdir -p /raid/part{1,2,3,4}
        for i in $(seq 1 4); do mount /dev/md0p$i /raid/part$i; done
      SHELL
    end
  end
end
